# SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
#
# SPDX-License-Identifier: CC0-1.0

version: "2"
run:
  concurrency: 1
output:
  formats:
    text:
      path: stdout
      colors: true
      print-linter-name: true
linters:
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - contextcheck
    - durationcheck
    - errchkjson
    - errorlint
    - exhaustive
    - gocheckcompilerdirectives
    - gochecksumtype
    - goconst
    - gocritic
    - gocyclo
    - gosec
    - gosmopolitan
    - loggercheck
    - makezero
    - misspell
    - musttag
    - nakedret
    - nilerr
    - nilnesserr
    - noctx
    - prealloc
    - protogetter
    - reassign
    - recvcheck
    - revive
    - rowserrcheck
    - spancheck
    - sqlclosecheck
    - testifylint
    - unconvert
    - unparam
    - zerologlint
  settings:
    dupl:
      threshold: 100
    errcheck:
      check-type-assertions: false
      check-blank: false
      exclude-functions:
        - io/ioutil.ReadFile
        - io/ioutil.ReadDir
        - io/ioutil.ReadAll
    goconst:
      min-len: 3
      min-occurrences: 5
    gocritic:
      enabled-tags:
        - performance
      settings:
        captLocal:
          paramsOnly: true
        rangeValCopy:
          sizeThreshold: 32
    gocyclo:
      min-complexity: 10
    lll:
      tab-width: 1
    nakedret:
      max-func-lines: 30
    prealloc:
      simple: true
      range-loops: true
      for-loops: false
    revive:
      confidence: 0.8
    unparam:
      check-exported: false
  exclusions:
    generated: lax
    rules:
      # Exclude some linters from running on tests files.
      - linters:
          - dupl
          - errcheck
          - gocyclo
          - gosec
          - scopelint
          - unparam
        path: _test(ing)?\.go
      # Ease some gocritic warnings on test files.
      - linters:
          - gocritic
        path: _test\.go
        text: (unnamedResult|exitAfterDefer)
      # These are performance optimisations rather than style issues per se.
      # They warn when function arguments or range values copy a lot of memory
      # rather than using a pointer.
      - linters:
          - gocritic
        text: '(hugeParam|rangeValCopy):'
      # This "TestMain should call os.Exit to set exit code" warning is not clever
      # enough to notice that we call a helper method that calls os.Exit.
      - linters:
          - staticcheck
        text: 'SA3000:'
      # This is a "potential hardcoded credentials" warning. It's triggered by
      # any variable with 'secret' in the same, and thus hits a lot of false
      # positives in Kubernetes land where a Secret is an object type.
      - linters:
          - gosec
        text: 'G101:'
      # This is an 'errors unhandled' warning that duplicates errcheck.
      - linters:
          - gosec
        text: 'G104:'
    paths:
      - zz_.*go$
      - third_party$
      - builtin$
      - examples$
issues:
  max-issues-per-linter: 0
  max-same-issues: 0
  new: false
formatters:
  enable:
    - gofmt
    - goimports
  settings:
    gofmt:
      simplify: true
    goimports:
      local-prefixes:
        - github.com/upbound/provider-azuread
  exclusions:
    generated: lax
    paths:
      - zz_.*go$
      - third_party$
      - builtin$
      - examples$
