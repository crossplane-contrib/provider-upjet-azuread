/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PreAuthorizedInitParameters struct {

	// A set of permission scope IDs required by the authorized application.
	// The IDs of the permission scopes required by the pre-authorized application
	PermissionIds []*string `json:"permissionIds,omitempty" tf:"permission_ids,omitempty"`
}

type PreAuthorizedObservation struct {

	// The object ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.
	// The object ID of the application to which this pre-authorized application should be added
	ApplicationObjectID *string `json:"applicationObjectId,omitempty" tf:"application_object_id,omitempty"`

	// The application ID of the pre-authorized application
	AuthorizedAppID *string `json:"authorizedAppId,omitempty" tf:"authorized_app_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of permission scope IDs required by the authorized application.
	// The IDs of the permission scopes required by the pre-authorized application
	PermissionIds []*string `json:"permissionIds,omitempty" tf:"permission_ids,omitempty"`
}

type PreAuthorizedParameters struct {

	// The object ID of the application for which permissions are being authorized. Changing this field forces a new resource to be created.
	// The object ID of the application to which this pre-authorized application should be added
	// +crossplane:generate:reference:type=Application
	// +kubebuilder:validation:Optional
	ApplicationObjectID *string `json:"applicationObjectId,omitempty" tf:"application_object_id,omitempty"`

	// Reference to a Application to populate applicationObjectId.
	// +kubebuilder:validation:Optional
	ApplicationObjectIDRef *v1.Reference `json:"applicationObjectIdRef,omitempty" tf:"-"`

	// Selector for a Application to populate applicationObjectId.
	// +kubebuilder:validation:Optional
	ApplicationObjectIDSelector *v1.Selector `json:"applicationObjectIdSelector,omitempty" tf:"-"`

	// The application ID of the pre-authorized application
	// +crossplane:generate:reference:type=Application
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("application_id",true)
	// +kubebuilder:validation:Optional
	AuthorizedAppID *string `json:"authorizedAppId,omitempty" tf:"authorized_app_id,omitempty"`

	// Reference to a Application to populate authorizedAppId.
	// +kubebuilder:validation:Optional
	AuthorizedAppIDRef *v1.Reference `json:"authorizedAppIdRef,omitempty" tf:"-"`

	// Selector for a Application to populate authorizedAppId.
	// +kubebuilder:validation:Optional
	AuthorizedAppIDSelector *v1.Selector `json:"authorizedAppIdSelector,omitempty" tf:"-"`

	// A set of permission scope IDs required by the authorized application.
	// The IDs of the permission scopes required by the pre-authorized application
	// +kubebuilder:validation:Optional
	PermissionIds []*string `json:"permissionIds,omitempty" tf:"permission_ids,omitempty"`
}

// PreAuthorizedSpec defines the desired state of PreAuthorized
type PreAuthorizedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PreAuthorizedParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PreAuthorizedInitParameters `json:"initProvider,omitempty"`
}

// PreAuthorizedStatus defines the observed state of PreAuthorized.
type PreAuthorizedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PreAuthorizedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PreAuthorized is the Schema for the PreAuthorizeds API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuread}
type PreAuthorized struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.permissionIds) || (has(self.initProvider) && has(self.initProvider.permissionIds))",message="spec.forProvider.permissionIds is a required parameter"
	Spec   PreAuthorizedSpec   `json:"spec"`
	Status PreAuthorizedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PreAuthorizedList contains a list of PreAuthorizeds
type PreAuthorizedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PreAuthorized `json:"items"`
}

// Repository type metadata.
var (
	PreAuthorized_Kind             = "PreAuthorized"
	PreAuthorized_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PreAuthorized_Kind}.String()
	PreAuthorized_KindAPIVersion   = PreAuthorized_Kind + "." + CRDGroupVersion.String()
	PreAuthorized_GroupVersionKind = CRDGroupVersion.WithKind(PreAuthorized_Kind)
)

func init() {
	SchemeBuilder.Register(&PreAuthorized{}, &PreAuthorizedList{})
}
