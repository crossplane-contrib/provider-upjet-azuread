// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RoleEligibilityScheduleRequestInitParameters struct {

	// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
	// Identifier of the directory object representing the scope of the role eligibility schedule request
	DirectoryScopeID *string `json:"directoryScopeId,omitempty" tf:"directory_scope_id,omitempty"`

	// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
	// Justification for why the role is assigned
	Justification *string `json:"justification,omitempty" tf:"justification,omitempty"`

	// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
	// The object ID of the member principal
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/users/v1beta1.User
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("object_id",true)
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// Reference to a User in users to populate principalId.
	// +kubebuilder:validation:Optional
	PrincipalIDRef *v1.Reference `json:"principalIdRef,omitempty" tf:"-"`

	// Selector for a User in users to populate principalId.
	// +kubebuilder:validation:Optional
	PrincipalIDSelector *v1.Selector `json:"principalIdSelector,omitempty" tf:"-"`

	// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
	// The object ID of the directory role for this role eligibility schedule request
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/directoryroles/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("template_id",true)
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty" tf:"role_definition_id,omitempty"`

	// Reference to a Role in directoryroles to populate roleDefinitionId.
	// +kubebuilder:validation:Optional
	RoleDefinitionIDRef *v1.Reference `json:"roleDefinitionIdRef,omitempty" tf:"-"`

	// Selector for a Role in directoryroles to populate roleDefinitionId.
	// +kubebuilder:validation:Optional
	RoleDefinitionIDSelector *v1.Selector `json:"roleDefinitionIdSelector,omitempty" tf:"-"`
}

type RoleEligibilityScheduleRequestObservation struct {

	// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
	// Identifier of the directory object representing the scope of the role eligibility schedule request
	DirectoryScopeID *string `json:"directoryScopeId,omitempty" tf:"directory_scope_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
	// Justification for why the role is assigned
	Justification *string `json:"justification,omitempty" tf:"justification,omitempty"`

	// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
	// The object ID of the member principal
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
	// The object ID of the directory role for this role eligibility schedule request
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty" tf:"role_definition_id,omitempty"`
}

type RoleEligibilityScheduleRequestParameters struct {

	// Identifier of the directory object representing the scope of the role eligibility. Changing this forces a new resource to be created.
	// Identifier of the directory object representing the scope of the role eligibility schedule request
	// +kubebuilder:validation:Optional
	DirectoryScopeID *string `json:"directoryScopeId,omitempty" tf:"directory_scope_id,omitempty"`

	// Justification for why the principal is granted the role eligibility. Changing this forces a new resource to be created.
	// Justification for why the role is assigned
	// +kubebuilder:validation:Optional
	Justification *string `json:"justification,omitempty" tf:"justification,omitempty"`

	// The object ID of the principal to granted the role eligibility. Changing this forces a new resource to be created.
	// The object ID of the member principal
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/users/v1beta1.User
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("object_id",true)
	// +kubebuilder:validation:Optional
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	// Reference to a User in users to populate principalId.
	// +kubebuilder:validation:Optional
	PrincipalIDRef *v1.Reference `json:"principalIdRef,omitempty" tf:"-"`

	// Selector for a User in users to populate principalId.
	// +kubebuilder:validation:Optional
	PrincipalIDSelector *v1.Selector `json:"principalIdSelector,omitempty" tf:"-"`

	// The template ID (in the case of built-in roles) or object ID (in the case of custom roles) of the directory role you want to assign. Changing this forces a new resource to be created.
	// The object ID of the directory role for this role eligibility schedule request
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/directoryroles/v1beta1.Role
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractParamPath("template_id",true)
	// +kubebuilder:validation:Optional
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty" tf:"role_definition_id,omitempty"`

	// Reference to a Role in directoryroles to populate roleDefinitionId.
	// +kubebuilder:validation:Optional
	RoleDefinitionIDRef *v1.Reference `json:"roleDefinitionIdRef,omitempty" tf:"-"`

	// Selector for a Role in directoryroles to populate roleDefinitionId.
	// +kubebuilder:validation:Optional
	RoleDefinitionIDSelector *v1.Selector `json:"roleDefinitionIdSelector,omitempty" tf:"-"`
}

// RoleEligibilityScheduleRequestSpec defines the desired state of RoleEligibilityScheduleRequest
type RoleEligibilityScheduleRequestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleEligibilityScheduleRequestParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoleEligibilityScheduleRequestInitParameters `json:"initProvider,omitempty"`
}

// RoleEligibilityScheduleRequestStatus defines the observed state of RoleEligibilityScheduleRequest.
type RoleEligibilityScheduleRequestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleEligibilityScheduleRequestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// RoleEligibilityScheduleRequest is the Schema for the RoleEligibilityScheduleRequests API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuread}
type RoleEligibilityScheduleRequest struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.directoryScopeId) || (has(self.initProvider) && has(self.initProvider.directoryScopeId))",message="spec.forProvider.directoryScopeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.justification) || (has(self.initProvider) && has(self.initProvider.justification))",message="spec.forProvider.justification is a required parameter"
	Spec   RoleEligibilityScheduleRequestSpec   `json:"spec"`
	Status RoleEligibilityScheduleRequestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleEligibilityScheduleRequestList contains a list of RoleEligibilityScheduleRequests
type RoleEligibilityScheduleRequestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoleEligibilityScheduleRequest `json:"items"`
}

// Repository type metadata.
var (
	RoleEligibilityScheduleRequest_Kind             = "RoleEligibilityScheduleRequest"
	RoleEligibilityScheduleRequest_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoleEligibilityScheduleRequest_Kind}.String()
	RoleEligibilityScheduleRequest_KindAPIVersion   = RoleEligibilityScheduleRequest_Kind + "." + CRDGroupVersion.String()
	RoleEligibilityScheduleRequest_GroupVersionKind = CRDGroupVersion.WithKind(RoleEligibilityScheduleRequest_Kind)
)

func init() {
	SchemeBuilder.Register(&RoleEligibilityScheduleRequest{}, &RoleEligibilityScheduleRequestList{})
}
