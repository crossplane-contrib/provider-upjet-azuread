/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppRolesObservation struct {
	AllowedMemberTypes []*string `json:"allowedMemberTypes,omitempty" tf:"allowed_member_types,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AppRolesParameters struct {
}

type FeatureTagsObservation struct {
}

type FeatureTagsParameters struct {

	// Whether this service principal represents a custom SAML application
	// +kubebuilder:validation:Optional
	CustomSingleSignOn *bool `json:"customSingleSignOn,omitempty" tf:"custom_single_sign_on,omitempty"`

	// Whether this service principal represents an Enterprise Application
	// +kubebuilder:validation:Optional
	Enterprise *bool `json:"enterprise,omitempty" tf:"enterprise,omitempty"`

	// Whether this service principal represents a gallery application
	// +kubebuilder:validation:Optional
	Gallery *bool `json:"gallery,omitempty" tf:"gallery,omitempty"`

	// Whether this app is invisible to users in My Apps and Office 365 Launcher
	// +kubebuilder:validation:Optional
	Hide *bool `json:"hide,omitempty" tf:"hide,omitempty"`
}

type FeaturesObservation struct {

	// Whether this service principal represents a custom SAML application
	CustomSingleSignOnApp *bool `json:"customSingleSignOnApp,omitempty" tf:"custom_single_sign_on_app,omitempty"`

	// Whether this service principal represents an Enterprise Application
	EnterpriseApplication *bool `json:"enterpriseApplication,omitempty" tf:"enterprise_application,omitempty"`

	// Whether this service principal represents a gallery application
	GalleryApplication *bool `json:"galleryApplication,omitempty" tf:"gallery_application,omitempty"`

	// Whether this app is visible to users in My Apps and Office 365 Launcher
	VisibleToUsers *bool `json:"visibleToUsers,omitempty" tf:"visible_to_users,omitempty"`
}

type FeaturesParameters struct {
}

type Oauth2PermissionScopesObservation struct {
	AdminConsentDescription *string `json:"adminConsentDescription,omitempty" tf:"admin_consent_description,omitempty"`

	AdminConsentDisplayName *string `json:"adminConsentDisplayName,omitempty" tf:"admin_consent_display_name,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UserConsentDescription *string `json:"userConsentDescription,omitempty" tf:"user_consent_description,omitempty"`

	UserConsentDisplayName *string `json:"userConsentDisplayName,omitempty" tf:"user_consent_display_name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type Oauth2PermissionScopesParameters struct {
}

type PrincipalObservation struct {

	// Mapping of app role names to UUIDs
	AppRoleIds map[string]*string `json:"appRoleIds,omitempty" tf:"app_role_ids,omitempty"`

	AppRoles []AppRolesObservation `json:"appRoles,omitempty" tf:"app_roles,omitempty"`

	// The tenant ID where the associated application is registered
	ApplicationTenantID *string `json:"applicationTenantId,omitempty" tf:"application_tenant_id,omitempty"`

	// The display name of the application associated with this service principal
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Block of features to configure for this service principal using tags
	Features []FeaturesObservation `json:"features,omitempty" tf:"features,omitempty"`

	// Home page or landing page of the application
	HomepageURL *string `json:"homepageUrl,omitempty" tf:"homepage_url,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The URL that will be used by Microsoft's authorization service to sign out a user using front-channel, back-channel or SAML logout protocols
	LogoutURL *string `json:"logoutUrl,omitempty" tf:"logout_url,omitempty"`

	// Mapping of OAuth2.0 permission scope names to UUIDs
	Oauth2PermissionScopeIds map[string]*string `json:"oauth2PermissionScopeIds,omitempty" tf:"oauth2_permission_scope_ids,omitempty"`

	Oauth2PermissionScopes []Oauth2PermissionScopesObservation `json:"oauth2PermissionScopes,omitempty" tf:"oauth2_permission_scopes,omitempty"`

	// The object ID of the service principal
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The URLs where user tokens are sent for sign-in with the associated application, or the redirect URIs where OAuth 2.0 authorization codes and access tokens are sent for the associated application
	RedirectUris []*string `json:"redirectUris,omitempty" tf:"redirect_uris,omitempty"`

	// The URL where the service exposes SAML metadata for federation
	SAMLMetadataURL *string `json:"samlMetadataUrl,omitempty" tf:"saml_metadata_url,omitempty"`

	// A list of identifier URI(s), copied over from the associated application
	ServicePrincipalNames []*string `json:"servicePrincipalNames,omitempty" tf:"service_principal_names,omitempty"`

	// The Microsoft account types that are supported for the associated application
	SignInAudience *string `json:"signInAudience,omitempty" tf:"sign_in_audience,omitempty"`

	// Identifies whether the service principal represents an application or a managed identity
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrincipalParameters struct {

	// Whether or not the service principal account is enabled
	// +kubebuilder:validation:Optional
	AccountEnabled *bool `json:"accountEnabled,omitempty" tf:"account_enabled,omitempty"`

	// A list of alternative names, used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities
	// +kubebuilder:validation:Optional
	AlternativeNames []*string `json:"alternativeNames,omitempty" tf:"alternative_names,omitempty"`

	// Whether this service principal requires an app role assignment to a user or group before Azure AD will issue a user or access token to the application
	// +kubebuilder:validation:Optional
	AppRoleAssignmentRequired *bool `json:"appRoleAssignmentRequired,omitempty" tf:"app_role_assignment_required,omitempty"`

	// The application ID (client ID) of the application for which to create a service principal
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/applications/v1alpha1.Application
	// +crossplane:generate:reference:extractor=github.com/upbound/upjet/pkg/resource.ExtractParamPath("application_id",true)
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Reference to a Application in applications to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDRef *v1.Reference `json:"applicationIdRef,omitempty" tf:"-"`

	// Selector for a Application in applications to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDSelector *v1.Selector `json:"applicationIdSelector,omitempty" tf:"-"`

	// Description of the service principal provided for internal end-users
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Block of features to configure for this service principal using tags
	// +kubebuilder:validation:Optional
	FeatureTags []FeatureTagsParameters `json:"featureTags,omitempty" tf:"feature_tags,omitempty"`

	// The URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on
	// +kubebuilder:validation:Optional
	LoginURL *string `json:"loginUrl,omitempty" tf:"login_url,omitempty"`

	// Free text field to capture information about the service principal, typically used for operational purposes
	// +kubebuilder:validation:Optional
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// List of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications
	// +kubebuilder:validation:Optional
	NotificationEmailAddresses []*string `json:"notificationEmailAddresses,omitempty" tf:"notification_email_addresses,omitempty"`

	// A list of object IDs of principals that will be granted ownership of the service principal
	// +kubebuilder:validation:Optional
	Owners []*string `json:"owners,omitempty" tf:"owners,omitempty"`

	// The single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps
	// +kubebuilder:validation:Optional
	PreferredSingleSignOnMode *string `json:"preferredSingleSignOnMode,omitempty" tf:"preferred_single_sign_on_mode,omitempty"`

	// Settings related to SAML single sign-on
	// +kubebuilder:validation:Optional
	SAMLSingleSignOn []SAMLSingleSignOnParameters `json:"samlSingleSignOn,omitempty" tf:"saml_single_sign_on,omitempty"`

	// A set of tags to apply to the service principal
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// When true, the resource will return an existing service principal instead of failing with an error
	// +kubebuilder:validation:Optional
	UseExisting *bool `json:"useExisting,omitempty" tf:"use_existing,omitempty"`
}

type SAMLSingleSignOnObservation struct {
}

type SAMLSingleSignOnParameters struct {

	// The relative URI the service provider would redirect to after completion of the single sign-on flow
	// +kubebuilder:validation:Optional
	RelayState *string `json:"relayState,omitempty" tf:"relay_state,omitempty"`
}

// PrincipalSpec defines the desired state of Principal
type PrincipalSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrincipalParameters `json:"forProvider"`
}

// PrincipalStatus defines the observed state of Principal.
type PrincipalStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrincipalObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Principal is the Schema for the Principals API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuread}
type Principal struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrincipalSpec   `json:"spec"`
	Status            PrincipalStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrincipalList contains a list of Principals
type PrincipalList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Principal `json:"items"`
}

// Repository type metadata.
var (
	Principal_Kind             = "Principal"
	Principal_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Principal_Kind}.String()
	Principal_KindAPIVersion   = Principal_Kind + "." + CRDGroupVersion.String()
	Principal_GroupVersionKind = CRDGroupVersion.WithKind(Principal_Kind)
)

func init() {
	SchemeBuilder.Register(&Principal{}, &PrincipalList{})
}
