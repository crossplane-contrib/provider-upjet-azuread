// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta2

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Application.
func (mg *Application) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.API != nil {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.API.KnownClientApplications),
			Extract:       resource.ExtractParamPath("client_id", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.API.KnownClientApplicationsRefs,
			Selector:      mg.Spec.ForProvider.API.KnownClientApplicationsSelector,
			To: reference.To{
				List:    &ApplicationList{},
				Managed: &Application{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.API.KnownClientApplications")
		}
		mg.Spec.ForProvider.API.KnownClientApplications = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.API.KnownClientApplicationsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.API != nil {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.API.KnownClientApplications),
			Extract:       resource.ExtractParamPath("client_id", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.API.KnownClientApplicationsRefs,
			Selector:      mg.Spec.InitProvider.API.KnownClientApplicationsSelector,
			To: reference.To{
				List:    &ApplicationList{},
				Managed: &Application{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.API.KnownClientApplications")
		}
		mg.Spec.InitProvider.API.KnownClientApplications = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.API.KnownClientApplicationsRefs = mrsp.ResolvedReferences

	}

	return nil
}
