// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta2 "github.com/upbound/provider-azuread/apis/cluster/applications/v1beta2"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AppRole.
func (mg *AppRole) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Application.
func (mg *Application) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var mrsp reference.MultiResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.API); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.API[i3].KnownClientApplications),
			Extract:       resource.ExtractParamPath("client_id", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.API[i3].KnownClientApplicationsRefs,
			Selector:      mg.Spec.ForProvider.API[i3].KnownClientApplicationsSelector,
			To: reference.To{
				List:    &ApplicationList{},
				Managed: &Application{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.API[i3].KnownClientApplications")
		}
		mg.Spec.ForProvider.API[i3].KnownClientApplications = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.API[i3].KnownClientApplicationsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.API); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.API[i3].KnownClientApplications),
			Extract:       resource.ExtractParamPath("client_id", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.API[i3].KnownClientApplicationsRefs,
			Selector:      mg.Spec.InitProvider.API[i3].KnownClientApplicationsSelector,
			To: reference.To{
				List:    &ApplicationList{},
				Managed: &Application{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.API[i3].KnownClientApplications")
		}
		mg.Spec.InitProvider.API[i3].KnownClientApplications = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.API[i3].KnownClientApplicationsRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this Certificate.
func (mg *Certificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FederatedIdentityCredential.
func (mg *FederatedIdentityCredential) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Password.
func (mg *Password) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PreAuthorized.
func (mg *PreAuthorized) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizedClientID),
		Extract:      resource.ExtractParamPath("client_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.AuthorizedClientIDRef,
		Selector:     mg.Spec.ForProvider.AuthorizedClientIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizedClientID")
	}
	mg.Spec.ForProvider.AuthorizedClientID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizedClientIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthorizedClientID),
		Extract:      resource.ExtractParamPath("client_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.AuthorizedClientIDRef,
		Selector:     mg.Spec.InitProvider.AuthorizedClientIDSelector,
		To: reference.To{
			List:    &v1beta2.ApplicationList{},
			Managed: &v1beta2.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AuthorizedClientID")
	}
	mg.Spec.InitProvider.AuthorizedClientID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AuthorizedClientIDRef = rsp.ResolvedReference

	return nil
}
