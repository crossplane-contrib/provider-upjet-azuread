// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppRoleInitParameters_2 struct {

	// A set of values to specify whether this app role definition can be assigned to users and groups by setting to User, or to other applications by setting to Application, or to both.
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both
	// +listType=set
	AllowedMemberTypes []*string `json:"allowedMemberTypes,omitempty" tf:"allowed_member_types,omitempty"`

	// The resource ID of the application registration. Changing this forces a new resource to be created.
	// The resource ID of the application to which this app role should be applied
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/cluster/applications/v1beta2.Application
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Reference to a Application in applications to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDRef *v1.Reference `json:"applicationIdRef,omitempty" tf:"-"`

	// Selector for a Application in applications to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDSelector *v1.Selector `json:"applicationIdSelector,omitempty" tf:"-"`

	// Description of the app role that appears when the role is being assigned, and if the role functions as an application permissions, during the consent experiences.
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for the app role that appears during app role assignment and in consent experiences.
	// Display name for the app role that appears during app role assignment and in consent experiences
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The unique identifier of the app role. Must be a valid UUID. Changing this forces a new resource to be created.
	// The unique identifier of the app role
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The value that is used for the roles claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	// The value that is used for the `roles` claim in ID tokens and OAuth access tokens that are authenticating an assigned service or user principal
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AppRoleObservation_2 struct {

	// A set of values to specify whether this app role definition can be assigned to users and groups by setting to User, or to other applications by setting to Application, or to both.
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both
	// +listType=set
	AllowedMemberTypes []*string `json:"allowedMemberTypes,omitempty" tf:"allowed_member_types,omitempty"`

	// The resource ID of the application registration. Changing this forces a new resource to be created.
	// The resource ID of the application to which this app role should be applied
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Description of the app role that appears when the role is being assigned, and if the role functions as an application permissions, during the consent experiences.
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for the app role that appears during app role assignment and in consent experiences.
	// Display name for the app role that appears during app role assignment and in consent experiences
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The unique identifier of the app role. Must be a valid UUID. Changing this forces a new resource to be created.
	// The unique identifier of the app role
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The value that is used for the roles claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	// The value that is used for the `roles` claim in ID tokens and OAuth access tokens that are authenticating an assigned service or user principal
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AppRoleParameters_2 struct {

	// A set of values to specify whether this app role definition can be assigned to users and groups by setting to User, or to other applications by setting to Application, or to both.
	// Specifies whether this app role definition can be assigned to users and groups by setting to `User`, or to other applications (that are accessing this application in a standalone scenario) by setting to `Application`, or to both
	// +kubebuilder:validation:Optional
	// +listType=set
	AllowedMemberTypes []*string `json:"allowedMemberTypes,omitempty" tf:"allowed_member_types,omitempty"`

	// The resource ID of the application registration. Changing this forces a new resource to be created.
	// The resource ID of the application to which this app role should be applied
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/cluster/applications/v1beta2.Application
	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// Reference to a Application in applications to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDRef *v1.Reference `json:"applicationIdRef,omitempty" tf:"-"`

	// Selector for a Application in applications to populate applicationId.
	// +kubebuilder:validation:Optional
	ApplicationIDSelector *v1.Selector `json:"applicationIdSelector,omitempty" tf:"-"`

	// Description of the app role that appears when the role is being assigned, and if the role functions as an application permissions, during the consent experiences.
	// Description of the app role that appears when the role is being assigned and, if the role functions as an application permissions, during the consent experiences
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for the app role that appears during app role assignment and in consent experiences.
	// Display name for the app role that appears during app role assignment and in consent experiences
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The unique identifier of the app role. Must be a valid UUID. Changing this forces a new resource to be created.
	// The unique identifier of the app role
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`

	// The value that is used for the roles claim in ID tokens and OAuth 2.0 access tokens that are authenticating an assigned service or user principal.
	// The value that is used for the `roles` claim in ID tokens and OAuth access tokens that are authenticating an assigned service or user principal
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// AppRoleSpec defines the desired state of AppRole
type AppRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppRoleParameters_2 `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AppRoleInitParameters_2 `json:"initProvider,omitempty"`
}

// AppRoleStatus defines the observed state of AppRole.
type AppRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppRoleObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AppRole is the Schema for the AppRoles API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuread}
type AppRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.allowedMemberTypes) || (has(self.initProvider) && has(self.initProvider.allowedMemberTypes))",message="spec.forProvider.allowedMemberTypes is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.description) || (has(self.initProvider) && has(self.initProvider.description))",message="spec.forProvider.description is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleId) || (has(self.initProvider) && has(self.initProvider.roleId))",message="spec.forProvider.roleId is a required parameter"
	Spec   AppRoleSpec   `json:"spec"`
	Status AppRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppRoleList contains a list of AppRoles
type AppRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppRole `json:"items"`
}

// Repository type metadata.
var (
	AppRole_Kind             = "AppRole"
	AppRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppRole_Kind}.String()
	AppRole_KindAPIVersion   = AppRole_Kind + "." + CRDGroupVersion.String()
	AppRole_GroupVersionKind = CRDGroupVersion.WithKind(AppRole_Kind)
)

func init() {
	SchemeBuilder.Register(&AppRole{}, &AppRoleList{})
}
