// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/v2/pkg/reference"
	resource "github.com/crossplane/upjet/v2/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta2 "github.com/upbound/provider-azuread/apis/cluster/groups/v1beta2"
	v1beta1 "github.com/upbound/provider-azuread/apis/cluster/users/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this PrivilegedAccessGroupAssignmentSchedule.
func (mg *PrivilegedAccessGroupAssignmentSchedule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.GroupIDRef,
		Selector:     mg.Spec.ForProvider.GroupIDSelector,
		To: reference.To{
			List:    &v1beta2.GroupList{},
			Managed: &v1beta2.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupID")
	}
	mg.Spec.ForProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrincipalID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.PrincipalIDRef,
		Selector:     mg.Spec.ForProvider.PrincipalIDSelector,
		To: reference.To{
			List:    &v1beta1.UserList{},
			Managed: &v1beta1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrincipalID")
	}
	mg.Spec.ForProvider.PrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrincipalIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.GroupIDRef,
		Selector:     mg.Spec.InitProvider.GroupIDSelector,
		To: reference.To{
			List:    &v1beta2.GroupList{},
			Managed: &v1beta2.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupID")
	}
	mg.Spec.InitProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrincipalID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.PrincipalIDRef,
		Selector:     mg.Spec.InitProvider.PrincipalIDSelector,
		To: reference.To{
			List:    &v1beta1.UserList{},
			Managed: &v1beta1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PrincipalID")
	}
	mg.Spec.InitProvider.PrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PrincipalIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivilegedAccessGroupEligibilitySchedule.
func (mg *PrivilegedAccessGroupEligibilitySchedule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.GroupID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.GroupIDRef,
		Selector:     mg.Spec.ForProvider.GroupIDSelector,
		To: reference.To{
			List:    &v1beta2.GroupList{},
			Managed: &v1beta2.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.GroupID")
	}
	mg.Spec.ForProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.GroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrincipalID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.PrincipalIDRef,
		Selector:     mg.Spec.ForProvider.PrincipalIDSelector,
		To: reference.To{
			List:    &v1beta1.UserList{},
			Managed: &v1beta1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrincipalID")
	}
	mg.Spec.ForProvider.PrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrincipalIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.GroupID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.GroupIDRef,
		Selector:     mg.Spec.InitProvider.GroupIDSelector,
		To: reference.To{
			List:    &v1beta2.GroupList{},
			Managed: &v1beta2.Group{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.GroupID")
	}
	mg.Spec.InitProvider.GroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.GroupIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrincipalID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.PrincipalIDRef,
		Selector:     mg.Spec.InitProvider.PrincipalIDSelector,
		To: reference.To{
			List:    &v1beta1.UserList{},
			Managed: &v1beta1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PrincipalID")
	}
	mg.Spec.InitProvider.PrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PrincipalIDRef = rsp.ResolvedReference

	return nil
}
