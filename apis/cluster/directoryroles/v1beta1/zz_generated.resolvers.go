// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta1 "github.com/upbound/provider-azuread/apis/cluster/users/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this RoleAssignment.
func (mg *RoleAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrincipalObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.PrincipalObjectIDRef,
		Selector:     mg.Spec.ForProvider.PrincipalObjectIDSelector,
		To: reference.To{
			List:    &v1beta1.UserList{},
			Managed: &v1beta1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrincipalObjectID")
	}
	mg.Spec.ForProvider.PrincipalObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrincipalObjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleID),
		Extract:      resource.ExtractParamPath("template_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.RoleIDRef,
		Selector:     mg.Spec.ForProvider.RoleIDSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleID")
	}
	mg.Spec.ForProvider.RoleID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrincipalObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.PrincipalObjectIDRef,
		Selector:     mg.Spec.InitProvider.PrincipalObjectIDSelector,
		To: reference.To{
			List:    &v1beta1.UserList{},
			Managed: &v1beta1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PrincipalObjectID")
	}
	mg.Spec.InitProvider.PrincipalObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PrincipalObjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleID),
		Extract:      resource.ExtractParamPath("template_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.RoleIDRef,
		Selector:     mg.Spec.InitProvider.RoleIDSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleID")
	}
	mg.Spec.InitProvider.RoleID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RoleEligibilityScheduleRequest.
func (mg *RoleEligibilityScheduleRequest) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrincipalID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.PrincipalIDRef,
		Selector:     mg.Spec.ForProvider.PrincipalIDSelector,
		To: reference.To{
			List:    &v1beta1.UserList{},
			Managed: &v1beta1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrincipalID")
	}
	mg.Spec.ForProvider.PrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrincipalIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoleDefinitionID),
		Extract:      resource.ExtractParamPath("template_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.RoleDefinitionIDRef,
		Selector:     mg.Spec.ForProvider.RoleDefinitionIDSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoleDefinitionID")
	}
	mg.Spec.ForProvider.RoleDefinitionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoleDefinitionIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.PrincipalID),
		Extract:      resource.ExtractParamPath("object_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.PrincipalIDRef,
		Selector:     mg.Spec.InitProvider.PrincipalIDSelector,
		To: reference.To{
			List:    &v1beta1.UserList{},
			Managed: &v1beta1.User{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.PrincipalID")
	}
	mg.Spec.InitProvider.PrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.PrincipalIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.RoleDefinitionID),
		Extract:      resource.ExtractParamPath("template_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.RoleDefinitionIDRef,
		Selector:     mg.Spec.InitProvider.RoleDefinitionIDSelector,
		To: reference.To{
			List:    &RoleList{},
			Managed: &Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoleDefinitionID")
	}
	mg.Spec.InitProvider.RoleDefinitionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.RoleDefinitionIDRef = rsp.ResolvedReference

	return nil
}
