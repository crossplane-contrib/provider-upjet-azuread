// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azuread/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *PermissionGrant) ResolveReferences( // ResolveReferences of this PermissionGrant.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ResourceServicePrincipalObjectID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ResourceServicePrincipalObjectIDRef,
			Selector:     mg.Spec.ForProvider.ResourceServicePrincipalObjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ResourceServicePrincipalObjectID")
	}
	mg.Spec.ForProvider.ResourceServicePrincipalObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ResourceServicePrincipalObjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalObjectID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServicePrincipalObjectIDRef,
			Selector:     mg.Spec.ForProvider.ServicePrincipalObjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalObjectID")
	}
	mg.Spec.ForProvider.ServicePrincipalObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalObjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("users.azuread.upbound.io", "v1beta1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.UserObjectID),
			Extract:      resource.ExtractParamPath("object_id", true),
			Reference:    mg.Spec.ForProvider.UserObjectIDRef,
			Selector:     mg.Spec.ForProvider.UserObjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.UserObjectID")
	}
	mg.Spec.ForProvider.UserObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.UserObjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ResourceServicePrincipalObjectID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ResourceServicePrincipalObjectIDRef,
			Selector:     mg.Spec.InitProvider.ResourceServicePrincipalObjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ResourceServicePrincipalObjectID")
	}
	mg.Spec.InitProvider.ResourceServicePrincipalObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ResourceServicePrincipalObjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalObjectID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServicePrincipalObjectIDRef,
			Selector:     mg.Spec.InitProvider.ServicePrincipalObjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalObjectID")
	}
	mg.Spec.InitProvider.ServicePrincipalObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalObjectIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("users.azuread.upbound.io", "v1beta1", "User", "UserList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.UserObjectID),
			Extract:      resource.ExtractParamPath("object_id", true),
			Reference:    mg.Spec.InitProvider.UserObjectIDRef,
			Selector:     mg.Spec.InitProvider.UserObjectIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.UserObjectID")
	}
	mg.Spec.InitProvider.UserObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.UserObjectIDRef = rsp.ResolvedReference

	return nil
}
