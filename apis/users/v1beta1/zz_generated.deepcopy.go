//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1beta1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *User) DeepCopyInto(out *User) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new User.
func (in *User) DeepCopy() *User {
	if in == nil {
		return nil
	}
	out := new(User)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *User) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserList) DeepCopyInto(out *UserList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]User, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserList.
func (in *UserList) DeepCopy() *UserList {
	if in == nil {
		return nil
	}
	out := new(UserList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *UserList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserObservation) DeepCopyInto(out *UserObservation) {
	*out = *in
	if in.AboutMe != nil {
		in, out := &in.AboutMe, &out.AboutMe
		*out = new(string)
		**out = **in
	}
	if in.CreationType != nil {
		in, out := &in.CreationType, &out.CreationType
		*out = new(string)
		**out = **in
	}
	if in.ExternalUserState != nil {
		in, out := &in.ExternalUserState, &out.ExternalUserState
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.ImAddresses != nil {
		in, out := &in.ImAddresses, &out.ImAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ObjectID != nil {
		in, out := &in.ObjectID, &out.ObjectID
		*out = new(string)
		**out = **in
	}
	if in.OnpremisesDistinguishedName != nil {
		in, out := &in.OnpremisesDistinguishedName, &out.OnpremisesDistinguishedName
		*out = new(string)
		**out = **in
	}
	if in.OnpremisesDomainName != nil {
		in, out := &in.OnpremisesDomainName, &out.OnpremisesDomainName
		*out = new(string)
		**out = **in
	}
	if in.OnpremisesSamAccountName != nil {
		in, out := &in.OnpremisesSamAccountName, &out.OnpremisesSamAccountName
		*out = new(string)
		**out = **in
	}
	if in.OnpremisesSecurityIdentifier != nil {
		in, out := &in.OnpremisesSecurityIdentifier, &out.OnpremisesSecurityIdentifier
		*out = new(string)
		**out = **in
	}
	if in.OnpremisesSyncEnabled != nil {
		in, out := &in.OnpremisesSyncEnabled, &out.OnpremisesSyncEnabled
		*out = new(bool)
		**out = **in
	}
	if in.OnpremisesUserPrincipalName != nil {
		in, out := &in.OnpremisesUserPrincipalName, &out.OnpremisesUserPrincipalName
		*out = new(string)
		**out = **in
	}
	if in.ProxyAddresses != nil {
		in, out := &in.ProxyAddresses, &out.ProxyAddresses
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.UserType != nil {
		in, out := &in.UserType, &out.UserType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserObservation.
func (in *UserObservation) DeepCopy() *UserObservation {
	if in == nil {
		return nil
	}
	out := new(UserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserParameters) DeepCopyInto(out *UserParameters) {
	*out = *in
	if in.AccountEnabled != nil {
		in, out := &in.AccountEnabled, &out.AccountEnabled
		*out = new(bool)
		**out = **in
	}
	if in.AgeGroup != nil {
		in, out := &in.AgeGroup, &out.AgeGroup
		*out = new(string)
		**out = **in
	}
	if in.BusinessPhones != nil {
		in, out := &in.BusinessPhones, &out.BusinessPhones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.City != nil {
		in, out := &in.City, &out.City
		*out = new(string)
		**out = **in
	}
	if in.CompanyName != nil {
		in, out := &in.CompanyName, &out.CompanyName
		*out = new(string)
		**out = **in
	}
	if in.ConsentProvidedForMinor != nil {
		in, out := &in.ConsentProvidedForMinor, &out.ConsentProvidedForMinor
		*out = new(string)
		**out = **in
	}
	if in.CostCenter != nil {
		in, out := &in.CostCenter, &out.CostCenter
		*out = new(string)
		**out = **in
	}
	if in.Country != nil {
		in, out := &in.Country, &out.Country
		*out = new(string)
		**out = **in
	}
	if in.Department != nil {
		in, out := &in.Department, &out.Department
		*out = new(string)
		**out = **in
	}
	if in.DisablePasswordExpiration != nil {
		in, out := &in.DisablePasswordExpiration, &out.DisablePasswordExpiration
		*out = new(bool)
		**out = **in
	}
	if in.DisableStrongPassword != nil {
		in, out := &in.DisableStrongPassword, &out.DisableStrongPassword
		*out = new(bool)
		**out = **in
	}
	if in.DisplayName != nil {
		in, out := &in.DisplayName, &out.DisplayName
		*out = new(string)
		**out = **in
	}
	if in.Division != nil {
		in, out := &in.Division, &out.Division
		*out = new(string)
		**out = **in
	}
	if in.EmployeeID != nil {
		in, out := &in.EmployeeID, &out.EmployeeID
		*out = new(string)
		**out = **in
	}
	if in.EmployeeType != nil {
		in, out := &in.EmployeeType, &out.EmployeeType
		*out = new(string)
		**out = **in
	}
	if in.FaxNumber != nil {
		in, out := &in.FaxNumber, &out.FaxNumber
		*out = new(string)
		**out = **in
	}
	if in.ForcePasswordChange != nil {
		in, out := &in.ForcePasswordChange, &out.ForcePasswordChange
		*out = new(bool)
		**out = **in
	}
	if in.GivenName != nil {
		in, out := &in.GivenName, &out.GivenName
		*out = new(string)
		**out = **in
	}
	if in.JobTitle != nil {
		in, out := &in.JobTitle, &out.JobTitle
		*out = new(string)
		**out = **in
	}
	if in.Mail != nil {
		in, out := &in.Mail, &out.Mail
		*out = new(string)
		**out = **in
	}
	if in.MailNickname != nil {
		in, out := &in.MailNickname, &out.MailNickname
		*out = new(string)
		**out = **in
	}
	if in.ManagerID != nil {
		in, out := &in.ManagerID, &out.ManagerID
		*out = new(string)
		**out = **in
	}
	if in.MobilePhone != nil {
		in, out := &in.MobilePhone, &out.MobilePhone
		*out = new(string)
		**out = **in
	}
	if in.OfficeLocation != nil {
		in, out := &in.OfficeLocation, &out.OfficeLocation
		*out = new(string)
		**out = **in
	}
	if in.OnpremisesImmutableID != nil {
		in, out := &in.OnpremisesImmutableID, &out.OnpremisesImmutableID
		*out = new(string)
		**out = **in
	}
	if in.OtherMails != nil {
		in, out := &in.OtherMails, &out.OtherMails
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.PostalCode != nil {
		in, out := &in.PostalCode, &out.PostalCode
		*out = new(string)
		**out = **in
	}
	if in.PreferredLanguage != nil {
		in, out := &in.PreferredLanguage, &out.PreferredLanguage
		*out = new(string)
		**out = **in
	}
	if in.ShowInAddressList != nil {
		in, out := &in.ShowInAddressList, &out.ShowInAddressList
		*out = new(bool)
		**out = **in
	}
	if in.State != nil {
		in, out := &in.State, &out.State
		*out = new(string)
		**out = **in
	}
	if in.StreetAddress != nil {
		in, out := &in.StreetAddress, &out.StreetAddress
		*out = new(string)
		**out = **in
	}
	if in.Surname != nil {
		in, out := &in.Surname, &out.Surname
		*out = new(string)
		**out = **in
	}
	if in.UsageLocation != nil {
		in, out := &in.UsageLocation, &out.UsageLocation
		*out = new(string)
		**out = **in
	}
	if in.UserPrincipalName != nil {
		in, out := &in.UserPrincipalName, &out.UserPrincipalName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserParameters.
func (in *UserParameters) DeepCopy() *UserParameters {
	if in == nil {
		return nil
	}
	out := new(UserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSpec) DeepCopyInto(out *UserSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSpec.
func (in *UserSpec) DeepCopy() *UserSpec {
	if in == nil {
		return nil
	}
	out := new(UserSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserStatus) DeepCopyInto(out *UserStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserStatus.
func (in *UserStatus) DeepCopy() *UserStatus {
	if in == nil {
		return nil
	}
	out := new(UserStatus)
	in.DeepCopyInto(out)
	return out
}
