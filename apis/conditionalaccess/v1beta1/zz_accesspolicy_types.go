/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessPolicyObservation struct {

	// The ID of the Conditional Access Policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AccessPolicyParameters struct {

	// A conditions block as documented below, which specifies the rules that must be met for the policy to apply.
	// +kubebuilder:validation:Required
	Conditions []ConditionsParameters `json:"conditions" tf:"conditions,omitempty"`

	// The friendly name for this Conditional Access Policy.
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// A grant_controls block as documented below, which specifies the grant controls that must be fulfilled to pass the policy.
	// +kubebuilder:validation:Required
	GrantControls []GrantControlsParameters `json:"grantControls" tf:"grant_controls,omitempty"`

	// A session_controls block as documented below, which specifies the session controls that are enforced after sign-in.
	// +kubebuilder:validation:Optional
	SessionControls []SessionControlsParameters `json:"sessionControls,omitempty" tf:"session_controls,omitempty"`

	// Specifies the state of the policy object. Possible values are: enabled, disabled and enabledForReportingButNotEnforced
	// +kubebuilder:validation:Required
	State *string `json:"state" tf:"state,omitempty"`
}

type ApplicationsObservation struct {
}

type ApplicationsParameters struct {

	// A list of application IDs explicitly excluded from the policy. Can also be set to Office365.
	// +kubebuilder:validation:Optional
	ExcludedApplications []*string `json:"excludedApplications,omitempty" tf:"excluded_applications,omitempty"`

	// A list of application IDs the policy applies to, unless explicitly excluded (in excluded_applications). Can also be set to All, None or Office365. Cannot be specified with included_user_actions. One of included_applications or included_user_actions must be specified.
	// +kubebuilder:validation:Optional
	IncludedApplications []*string `json:"includedApplications,omitempty" tf:"included_applications,omitempty"`

	// A list of user actions to include. Supported values are urn:user:registerdevice and urn:user:registersecurityinfo. Cannot be specified with included_applications. One of included_applications or included_user_actions must be specified.
	// +kubebuilder:validation:Optional
	IncludedUserActions []*string `json:"includedUserActions,omitempty" tf:"included_user_actions,omitempty"`
}

type ConditionsObservation struct {
}

type ConditionsParameters struct {

	// An applications block as documented below, which specifies applications and user actions included in and excluded from the policy.
	// +kubebuilder:validation:Required
	Applications []ApplicationsParameters `json:"applications" tf:"applications,omitempty"`

	// A list of client application types included in the policy. Possible values are: all, browser, mobileAppsAndDesktopClients, exchangeActiveSync, easSupported and other.
	// +kubebuilder:validation:Required
	ClientAppTypes []*string `json:"clientAppTypes" tf:"client_app_types,omitempty"`

	// A devices block as documented below, which describes devices to be included in and excluded from the policy. A devices block can be added to an existing policy, but removing the devices block forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Devices []DevicesParameters `json:"devices,omitempty" tf:"devices,omitempty"`

	// A locations block as documented below, which specifies locations included in and excluded from the policy.
	// +kubebuilder:validation:Optional
	Locations []LocationsParameters `json:"locations,omitempty" tf:"locations,omitempty"`

	// A platforms block as documented below, which specifies platforms included in and excluded from the policy.
	// +kubebuilder:validation:Optional
	Platforms []PlatformsParameters `json:"platforms,omitempty" tf:"platforms,omitempty"`

	// A list of sign-in risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue.
	// +kubebuilder:validation:Optional
	SignInRiskLevels []*string `json:"signInRiskLevels,omitempty" tf:"sign_in_risk_levels,omitempty"`

	// A list of user risk levels included in the policy. Possible values are: low, medium, high, hidden, none, unknownFutureValue.
	// +kubebuilder:validation:Optional
	UserRiskLevels []*string `json:"userRiskLevels,omitempty" tf:"user_risk_levels,omitempty"`

	// A users block as documented below, which specifies users, groups, and roles included in and excluded from the policy.
	// +kubebuilder:validation:Required
	Users []UsersParameters `json:"users" tf:"users,omitempty"`
}

type DevicesObservation struct {
}

type DevicesParameters struct {

	// A filter block as described below. A filter block can be added to an existing policy, but removing the filter block forces a new resource to be created.
	// +kubebuilder:validation:Optional
	Filter []FilterParameters `json:"filter,omitempty" tf:"filter,omitempty"`
}

type FilterObservation struct {
}

type FilterParameters struct {

	// Whether to include in, or exclude from, matching devices from the policy. Supported values are include or exclude.
	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`

	// Condition filter to match devices. For more information, see official documentation.
	// +kubebuilder:validation:Required
	Rule *string `json:"rule" tf:"rule,omitempty"`
}

type GrantControlsObservation struct {
}

type GrantControlsParameters struct {

	// List of built-in controls required by the policy. Possible values are: block, mfa, approvedApplication, compliantApplication, compliantDevice, domainJoinedDevice, passwordChange or unknownFutureValue.
	// +kubebuilder:validation:Required
	BuiltInControls []*string `json:"builtInControls" tf:"built_in_controls,omitempty"`

	// List of custom controls IDs required by the policy.
	// +kubebuilder:validation:Optional
	CustomAuthenticationFactors []*string `json:"customAuthenticationFactors,omitempty" tf:"custom_authentication_factors,omitempty"`

	// Defines the relationship of the grant controls. Possible values are: AND, OR.
	// +kubebuilder:validation:Required
	Operator *string `json:"operator" tf:"operator,omitempty"`

	// List of terms of use IDs required by the policy.
	// +kubebuilder:validation:Optional
	TermsOfUse []*string `json:"termsOfUse,omitempty" tf:"terms_of_use,omitempty"`
}

type LocationsObservation struct {
}

type LocationsParameters struct {

	// A list of location IDs excluded from scope of policy. Can also be set to AllTrusted.
	// +kubebuilder:validation:Optional
	ExcludedLocations []*string `json:"excludedLocations,omitempty" tf:"excluded_locations,omitempty"`

	// A list of location IDs in scope of policy unless explicitly excluded. Can also be set to All, or AllTrusted.
	// +kubebuilder:validation:Required
	IncludedLocations []*string `json:"includedLocations" tf:"included_locations,omitempty"`
}

type PlatformsObservation struct {
}

type PlatformsParameters struct {

	// A list of platforms explicitly excluded from the policy. Possible values are: all, android, iOS, linux, macOS, windows, windowsPhone or unknownFutureValue.
	// +kubebuilder:validation:Optional
	ExcludedPlatforms []*string `json:"excludedPlatforms,omitempty" tf:"excluded_platforms,omitempty"`

	// A list of platforms the policy applies to, unless explicitly excluded. Possible values are: all, android, iOS, linux, macOS, windows, windowsPhone or unknownFutureValue.
	// +kubebuilder:validation:Required
	IncludedPlatforms []*string `json:"includedPlatforms" tf:"included_platforms,omitempty"`
}

type SessionControlsObservation struct {
}

type SessionControlsParameters struct {

	// Whether or not application enforced restrictions are enabled. Defaults to false.
	// +kubebuilder:validation:Optional
	ApplicationEnforcedRestrictionsEnabled *bool `json:"applicationEnforcedRestrictionsEnabled,omitempty" tf:"application_enforced_restrictions_enabled,omitempty"`

	// Enables cloud app security and specifies the cloud app security policy to use. Possible values are: blockDownloads, mcasConfigured, monitorOnly or unknownFutureValue.
	// +kubebuilder:validation:Optional
	CloudAppSecurityPolicy *string `json:"cloudAppSecurityPolicy,omitempty" tf:"cloud_app_security_policy,omitempty"`

	// Session control to define whether to persist cookies or not. Possible values are: always or never.
	// +kubebuilder:validation:Optional
	PersistentBrowserMode *string `json:"persistentBrowserMode,omitempty" tf:"persistent_browser_mode,omitempty"`

	// Number of days or hours to enforce sign-in frequency. Required when sign_in_frequency_period is specified. Due to an API issue, removing this property forces a new resource to be created.
	// +kubebuilder:validation:Optional
	SignInFrequency *float64 `json:"signInFrequency,omitempty" tf:"sign_in_frequency,omitempty"`

	// The time period to enforce sign-in frequency. Possible values are: hours or days. Required when sign_in_frequency_period is specified. Due to an API issue, removing this property forces a new resource to be created.
	// +kubebuilder:validation:Optional
	SignInFrequencyPeriod *string `json:"signInFrequencyPeriod,omitempty" tf:"sign_in_frequency_period,omitempty"`
}

type UsersObservation struct {
}

type UsersParameters struct {

	// A list of group IDs excluded from scope of policy.
	// +kubebuilder:validation:Optional
	ExcludedGroups []*string `json:"excludedGroups,omitempty" tf:"excluded_groups,omitempty"`

	// A list of role IDs excluded from scope of policy.
	// +kubebuilder:validation:Optional
	ExcludedRoles []*string `json:"excludedRoles,omitempty" tf:"excluded_roles,omitempty"`

	// A list of user IDs excluded from scope of policy and/or GuestsOrExternalUsers.
	// +kubebuilder:validation:Optional
	ExcludedUsers []*string `json:"excludedUsers,omitempty" tf:"excluded_users,omitempty"`

	// A list of group IDs in scope of policy unless explicitly excluded.
	// +kubebuilder:validation:Optional
	IncludedGroups []*string `json:"includedGroups,omitempty" tf:"included_groups,omitempty"`

	// A list of role IDs in scope of policy unless explicitly excluded.
	// +kubebuilder:validation:Optional
	IncludedRoles []*string `json:"includedRoles,omitempty" tf:"included_roles,omitempty"`

	// A list of user IDs in scope of policy unless explicitly excluded, or None or All or GuestsOrExternalUsers.
	// +kubebuilder:validation:Optional
	IncludedUsers []*string `json:"includedUsers,omitempty" tf:"included_users,omitempty"`
}

// AccessPolicySpec defines the desired state of AccessPolicy
type AccessPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccessPolicyParameters `json:"forProvider"`
}

// AccessPolicyStatus defines the observed state of AccessPolicy.
type AccessPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccessPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessPolicy is the Schema for the AccessPolicys API.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuread}
type AccessPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessPolicySpec   `json:"spec"`
	Status            AccessPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessPolicyList contains a list of AccessPolicys
type AccessPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessPolicy `json:"items"`
}

// Repository type metadata.
var (
	AccessPolicy_Kind             = "AccessPolicy"
	AccessPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessPolicy_Kind}.String()
	AccessPolicy_KindAPIVersion   = AccessPolicy_Kind + "." + CRDGroupVersion.String()
	AccessPolicy_GroupVersionKind = CRDGroupVersion.WithKind(AccessPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&AccessPolicy{}, &AccessPolicyList{})
}
