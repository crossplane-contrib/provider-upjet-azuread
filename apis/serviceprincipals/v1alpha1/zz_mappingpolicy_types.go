/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MappingPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type MappingPolicyParameters struct {

	// A string collection containing a JSON string that defines the rules and settings for this policy
	// +kubebuilder:validation:Required
	Definition []*string `json:"definition" tf:"definition,omitempty"`

	// Display name for this policy
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`
}

// MappingPolicySpec defines the desired state of MappingPolicy
type MappingPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MappingPolicyParameters `json:"forProvider"`
}

// MappingPolicyStatus defines the observed state of MappingPolicy.
type MappingPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MappingPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MappingPolicy is the Schema for the MappingPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuread}
type MappingPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MappingPolicySpec   `json:"spec"`
	Status            MappingPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MappingPolicyList contains a list of MappingPolicys
type MappingPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MappingPolicy `json:"items"`
}

// Repository type metadata.
var (
	MappingPolicy_Kind             = "MappingPolicy"
	MappingPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MappingPolicy_Kind}.String()
	MappingPolicy_KindAPIVersion   = MappingPolicy_Kind + "." + CRDGroupVersion.String()
	MappingPolicy_GroupVersionKind = CRDGroupVersion.WithKind(MappingPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&MappingPolicy{}, &MappingPolicyList{})
}
