/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrincipalCertificateObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PrincipalCertificateParameters struct {

	// Specifies the encoding used for the supplied certificate data
	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`)
	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// A relative duration for which the certificate is valid until, for example `240h` (10 days) or `2400h30m`. Valid time units are "ns", "us" (or "Âµs"), "ms", "s", "m", "h"
	// +kubebuilder:validation:Optional
	EndDateRelative *string `json:"endDateRelative,omitempty" tf:"end_date_relative,omitempty"`

	// A UUID used to uniquely identify this certificate. If not specified a UUID will be automatically generated
	// +kubebuilder:validation:Optional
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// The object ID of the service principal for which this certificate should be created
	// +kubebuilder:validation:Required
	ServicePrincipalID *string `json:"servicePrincipalId" tf:"service_principal_id,omitempty"`

	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). If this isn't specified, the current date is used
	// +kubebuilder:validation:Optional
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// The type of key/certificate
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The certificate data, which can be PEM encoded, base64 encoded DER or hexadecimal encoded DER
	// +kubebuilder:validation:Required
	ValueSecretRef v1.SecretKeySelector `json:"valueSecretRef" tf:"-"`
}

// PrincipalCertificateSpec defines the desired state of PrincipalCertificate
type PrincipalCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrincipalCertificateParameters `json:"forProvider"`
}

// PrincipalCertificateStatus defines the observed state of PrincipalCertificate.
type PrincipalCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrincipalCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrincipalCertificate is the Schema for the PrincipalCertificates API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuread}
type PrincipalCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PrincipalCertificateSpec   `json:"spec"`
	Status            PrincipalCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrincipalCertificateList contains a list of PrincipalCertificates
type PrincipalCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrincipalCertificate `json:"items"`
}

// Repository type metadata.
var (
	PrincipalCertificate_Kind             = "PrincipalCertificate"
	PrincipalCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrincipalCertificate_Kind}.String()
	PrincipalCertificate_KindAPIVersion   = PrincipalCertificate_Kind + "." + CRDGroupVersion.String()
	PrincipalCertificate_GroupVersionKind = CRDGroupVersion.WithKind(PrincipalCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&PrincipalCertificate{}, &PrincipalCertificateList{})
}
