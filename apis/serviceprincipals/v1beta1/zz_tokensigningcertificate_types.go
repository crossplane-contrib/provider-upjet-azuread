// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TokenSigningCertificateInitParameters struct {

	// Specifies a friendly name for the certificate. Must start with CN=. Changing this field forces a new resource to be created.
	// A friendly name for the certificate
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The end date until which the token signing certificate is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). Changing this field forces a new resource to be created.
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Default is 3 years from current date.
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.
	// The object ID of the service principal for which this certificate should be created
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/serviceprincipals/v1beta2.Principal
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// Reference to a Principal in serviceprincipals to populate servicePrincipalId.
	// +kubebuilder:validation:Optional
	ServicePrincipalIDRef *v1.Reference `json:"servicePrincipalIdRef,omitempty" tf:"-"`

	// Selector for a Principal in serviceprincipals to populate servicePrincipalId.
	// +kubebuilder:validation:Optional
	ServicePrincipalIDSelector *v1.Selector `json:"servicePrincipalIdSelector,omitempty" tf:"-"`
}

type TokenSigningCertificateObservation struct {

	// Specifies a friendly name for the certificate. Must start with CN=. Changing this field forces a new resource to be created.
	// A friendly name for the certificate
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The end date until which the token signing certificate is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). Changing this field forces a new resource to be created.
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Default is 3 years from current date.
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A UUID used to uniquely identify the verify certificate.
	// A UUID used to uniquely identify the verify certificate.
	KeyID *string `json:"keyId,omitempty" tf:"key_id,omitempty"`

	// The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.
	// The object ID of the service principal for which this certificate should be created
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z).
	// The start date from which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`).
	StartDate *string `json:"startDate,omitempty" tf:"start_date,omitempty"`

	// A SHA-1 generated thumbprint of the token signing certificate, which can be used to set the preferred signing certificate for a service principal.
	// The thumbprint of the certificate.
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type TokenSigningCertificateParameters struct {

	// Specifies a friendly name for the certificate. Must start with CN=. Changing this field forces a new resource to be created.
	// A friendly name for the certificate
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The end date until which the token signing certificate is valid, formatted as an RFC3339 date string (e.g. 2018-01-01T01:02:03Z). Changing this field forces a new resource to be created.
	// The end date until which the certificate is valid, formatted as an RFC3339 date string (e.g. `2018-01-01T01:02:03Z`). Default is 3 years from current date.
	// +kubebuilder:validation:Optional
	EndDate *string `json:"endDate,omitempty" tf:"end_date,omitempty"`

	// The object ID of the service principal for which this certificate should be created. Changing this field forces a new resource to be created.
	// The object ID of the service principal for which this certificate should be created
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/serviceprincipals/v1beta2.Principal
	// +kubebuilder:validation:Optional
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// Reference to a Principal in serviceprincipals to populate servicePrincipalId.
	// +kubebuilder:validation:Optional
	ServicePrincipalIDRef *v1.Reference `json:"servicePrincipalIdRef,omitempty" tf:"-"`

	// Selector for a Principal in serviceprincipals to populate servicePrincipalId.
	// +kubebuilder:validation:Optional
	ServicePrincipalIDSelector *v1.Selector `json:"servicePrincipalIdSelector,omitempty" tf:"-"`
}

// TokenSigningCertificateSpec defines the desired state of TokenSigningCertificate
type TokenSigningCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TokenSigningCertificateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TokenSigningCertificateInitParameters `json:"initProvider,omitempty"`
}

// TokenSigningCertificateStatus defines the observed state of TokenSigningCertificate.
type TokenSigningCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TokenSigningCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// TokenSigningCertificate is the Schema for the TokenSigningCertificates API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azuread}
type TokenSigningCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TokenSigningCertificateSpec   `json:"spec"`
	Status            TokenSigningCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TokenSigningCertificateList contains a list of TokenSigningCertificates
type TokenSigningCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TokenSigningCertificate `json:"items"`
}

// Repository type metadata.
var (
	TokenSigningCertificate_Kind             = "TokenSigningCertificate"
	TokenSigningCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TokenSigningCertificate_Kind}.String()
	TokenSigningCertificate_KindAPIVersion   = TokenSigningCertificate_Kind + "." + CRDGroupVersion.String()
	TokenSigningCertificate_GroupVersionKind = CRDGroupVersion.WithKind(TokenSigningCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&TokenSigningCertificate{}, &TokenSigningCertificateList{})
}
