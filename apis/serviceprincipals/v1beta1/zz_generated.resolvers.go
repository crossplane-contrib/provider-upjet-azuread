// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	v1beta11 "github.com/upbound/provider-azuread/apis/applications/v1beta1"
	v1beta1 "github.com/upbound/provider-azuread/apis/policies/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Certificate.
func (mg *Certificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServicePrincipalIDRef,
		Selector:     mg.Spec.ForProvider.ServicePrincipalIDSelector,
		To: reference.To{
			List:    &PrincipalList{},
			Managed: &Principal{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalID")
	}
	mg.Spec.ForProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServicePrincipalIDRef,
		Selector:     mg.Spec.InitProvider.ServicePrincipalIDSelector,
		To: reference.To{
			List:    &PrincipalList{},
			Managed: &Principal{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalID")
	}
	mg.Spec.InitProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ClaimsMappingPolicyAssignment.
func (mg *ClaimsMappingPolicyAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClaimsMappingPolicyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ClaimsMappingPolicyIDRef,
		Selector:     mg.Spec.ForProvider.ClaimsMappingPolicyIDSelector,
		To: reference.To{
			List:    &v1beta1.ClaimsMappingPolicyList{},
			Managed: &v1beta1.ClaimsMappingPolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClaimsMappingPolicyID")
	}
	mg.Spec.ForProvider.ClaimsMappingPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClaimsMappingPolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServicePrincipalIDRef,
		Selector:     mg.Spec.ForProvider.ServicePrincipalIDSelector,
		To: reference.To{
			List:    &PrincipalList{},
			Managed: &Principal{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalID")
	}
	mg.Spec.ForProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClaimsMappingPolicyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ClaimsMappingPolicyIDRef,
		Selector:     mg.Spec.InitProvider.ClaimsMappingPolicyIDSelector,
		To: reference.To{
			List:    &v1beta1.ClaimsMappingPolicyList{},
			Managed: &v1beta1.ClaimsMappingPolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClaimsMappingPolicyID")
	}
	mg.Spec.InitProvider.ClaimsMappingPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClaimsMappingPolicyIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServicePrincipalIDRef,
		Selector:     mg.Spec.InitProvider.ServicePrincipalIDSelector,
		To: reference.To{
			List:    &PrincipalList{},
			Managed: &Principal{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalID")
	}
	mg.Spec.InitProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Password.
func (mg *Password) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServicePrincipalIDRef,
		Selector:     mg.Spec.ForProvider.ServicePrincipalIDSelector,
		To: reference.To{
			List:    &PrincipalList{},
			Managed: &Principal{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalID")
	}
	mg.Spec.ForProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServicePrincipalIDRef,
		Selector:     mg.Spec.InitProvider.ServicePrincipalIDSelector,
		To: reference.To{
			List:    &PrincipalList{},
			Managed: &Principal{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalID")
	}
	mg.Spec.InitProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Principal.
func (mg *Principal) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      resource.ExtractParamPath("application_id", true),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta11.ApplicationList{},
			Managed: &v1beta11.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      resource.ExtractParamPath("application_id", true),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &v1beta11.ApplicationList{},
			Managed: &v1beta11.Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TokenSigningCertificate.
func (mg *TokenSigningCertificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ServicePrincipalIDRef,
		Selector:     mg.Spec.ForProvider.ServicePrincipalIDSelector,
		To: reference.To{
			List:    &PrincipalList{},
			Managed: &Principal{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalID")
	}
	mg.Spec.ForProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.InitProvider.ServicePrincipalIDRef,
		Selector:     mg.Spec.InitProvider.ServicePrincipalIDSelector,
		To: reference.To{
			List:    &PrincipalList{},
			Managed: &Principal{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalID")
	}
	mg.Spec.InitProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	return nil
}
