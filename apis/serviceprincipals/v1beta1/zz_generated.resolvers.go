// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	apisresolver "github.com/upbound/provider-azuread/internal/apis"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

func (mg *Certificate) ResolveReferences( // ResolveReferences of this Certificate.
	ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServicePrincipalIDRef,
			Selector:     mg.Spec.ForProvider.ServicePrincipalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalID")
	}
	mg.Spec.ForProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServicePrincipalIDRef,
			Selector:     mg.Spec.InitProvider.ServicePrincipalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalID")
	}
	mg.Spec.InitProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ClaimsMappingPolicyAssignment.
func (mg *ClaimsMappingPolicyAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("policies.azuread.upbound.io", "v1beta1", "ClaimsMappingPolicy", "ClaimsMappingPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClaimsMappingPolicyID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ClaimsMappingPolicyIDRef,
			Selector:     mg.Spec.ForProvider.ClaimsMappingPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClaimsMappingPolicyID")
	}
	mg.Spec.ForProvider.ClaimsMappingPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClaimsMappingPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServicePrincipalIDRef,
			Selector:     mg.Spec.ForProvider.ServicePrincipalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalID")
	}
	mg.Spec.ForProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("policies.azuread.upbound.io", "v1beta1", "ClaimsMappingPolicy", "ClaimsMappingPolicyList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClaimsMappingPolicyID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ClaimsMappingPolicyIDRef,
			Selector:     mg.Spec.InitProvider.ClaimsMappingPolicyIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClaimsMappingPolicyID")
	}
	mg.Spec.InitProvider.ClaimsMappingPolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClaimsMappingPolicyIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServicePrincipalIDRef,
			Selector:     mg.Spec.InitProvider.ServicePrincipalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalID")
	}
	mg.Spec.InitProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Password.
func (mg *Password) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServicePrincipalIDRef,
			Selector:     mg.Spec.ForProvider.ServicePrincipalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalID")
	}
	mg.Spec.ForProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServicePrincipalIDRef,
			Selector:     mg.Spec.InitProvider.ServicePrincipalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalID")
	}
	mg.Spec.InitProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Principal.
func (mg *Principal) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("applications.azuread.upbound.io", "v1beta1", "Application", "ApplicationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ClientID),
			Extract:      resource.ExtractParamPath("client_id", true),
			Reference:    mg.Spec.ForProvider.ClientIDRef,
			Selector:     mg.Spec.ForProvider.ClientIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ClientID")
	}
	mg.Spec.ForProvider.ClientID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ClientIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("applications.azuread.upbound.io", "v1beta1", "Application", "ApplicationList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ClientID),
			Extract:      resource.ExtractParamPath("client_id", true),
			Reference:    mg.Spec.InitProvider.ClientIDRef,
			Selector:     mg.Spec.InitProvider.ClientIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ClientID")
	}
	mg.Spec.InitProvider.ClientID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ClientIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TokenSigningCertificate.
func (mg *TokenSigningCertificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServicePrincipalID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ServicePrincipalIDRef,
			Selector:     mg.Spec.ForProvider.ServicePrincipalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ServicePrincipalID")
	}
	mg.Spec.ForProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ServicePrincipalIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("serviceprincipals.azuread.upbound.io", "v1beta2", "Principal", "PrincipalList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ServicePrincipalID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ServicePrincipalIDRef,
			Selector:     mg.Spec.InitProvider.ServicePrincipalIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ServicePrincipalID")
	}
	mg.Spec.InitProvider.ServicePrincipalID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ServicePrincipalIDRef = rsp.ResolvedReference

	return nil
}
