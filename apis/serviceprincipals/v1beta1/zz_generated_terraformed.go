/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this Principal
func (mg *Principal) GetTerraformResourceType() string {
	return "azuread_service_principal"
}

// GetConnectionDetailsMapping for this Principal
func (tr *Principal) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Principal
func (tr *Principal) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Principal
func (tr *Principal) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Principal
func (tr *Principal) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Principal
func (tr *Principal) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Principal
func (tr *Principal) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Principal using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Principal) LateInitialize(attrs []byte) (bool, error) {
	params := &PrincipalParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Principal) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrincipalCertificate
func (mg *PrincipalCertificate) GetTerraformResourceType() string {
	return "azuread_service_principal_certificate"
}

// GetConnectionDetailsMapping for this PrincipalCertificate
func (tr *PrincipalCertificate) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"value": "spec.forProvider.valueSecretRef"}
}

// GetObservation of this PrincipalCertificate
func (tr *PrincipalCertificate) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrincipalCertificate
func (tr *PrincipalCertificate) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrincipalCertificate
func (tr *PrincipalCertificate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrincipalCertificate
func (tr *PrincipalCertificate) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrincipalCertificate
func (tr *PrincipalCertificate) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrincipalCertificate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrincipalCertificate) LateInitialize(attrs []byte) (bool, error) {
	params := &PrincipalCertificateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrincipalCertificate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrincipalClaimsMappingPolicyAssignment
func (mg *PrincipalClaimsMappingPolicyAssignment) GetTerraformResourceType() string {
	return "azuread_service_principal_claims_mapping_policy_assignment"
}

// GetConnectionDetailsMapping for this PrincipalClaimsMappingPolicyAssignment
func (tr *PrincipalClaimsMappingPolicyAssignment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrincipalClaimsMappingPolicyAssignment
func (tr *PrincipalClaimsMappingPolicyAssignment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrincipalClaimsMappingPolicyAssignment
func (tr *PrincipalClaimsMappingPolicyAssignment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrincipalClaimsMappingPolicyAssignment
func (tr *PrincipalClaimsMappingPolicyAssignment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrincipalClaimsMappingPolicyAssignment
func (tr *PrincipalClaimsMappingPolicyAssignment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrincipalClaimsMappingPolicyAssignment
func (tr *PrincipalClaimsMappingPolicyAssignment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrincipalClaimsMappingPolicyAssignment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrincipalClaimsMappingPolicyAssignment) LateInitialize(attrs []byte) (bool, error) {
	params := &PrincipalClaimsMappingPolicyAssignmentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrincipalClaimsMappingPolicyAssignment) GetTerraformSchemaVersion() int {
	return 0
}
