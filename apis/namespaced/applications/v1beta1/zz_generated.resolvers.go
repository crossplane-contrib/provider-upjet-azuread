// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0
// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this AppRole.
func (mg *AppRole) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Application.
func (mg *Application) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var mrsp reference.MultiNamespacedResolutionResponse
	var err error

	if mg.Spec.ForProvider.API != nil {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.API.KnownClientApplications),
			Extract:       resource.ExtractParamPath("application_id", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.ForProvider.API.KnownClientApplicationsRefs,
			Selector:      mg.Spec.ForProvider.API.KnownClientApplicationsSelector,
			To: reference.To{
				List:    &ApplicationList{},
				Managed: &Application{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.API.KnownClientApplications")
		}
		mg.Spec.ForProvider.API.KnownClientApplications = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.API.KnownClientApplicationsRefs = mrsp.ResolvedReferences

	}
	if mg.Spec.InitProvider.API != nil {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiNamespacedResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.API.KnownClientApplications),
			Extract:       resource.ExtractParamPath("application_id", true),
			Namespace:     mg.GetNamespace(),
			References:    mg.Spec.InitProvider.API.KnownClientApplicationsRefs,
			Selector:      mg.Spec.InitProvider.API.KnownClientApplicationsSelector,
			To: reference.To{
				List:    &ApplicationList{},
				Managed: &Application{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.API.KnownClientApplications")
		}
		mg.Spec.InitProvider.API.KnownClientApplications = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.API.KnownClientApplicationsRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this Certificate.
func (mg *Certificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationObjectIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationObjectIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationObjectID")
	}
	mg.Spec.ForProvider.ApplicationObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationObjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationObjectIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationObjectIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationObjectID")
	}
	mg.Spec.InitProvider.ApplicationObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationObjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this FederatedIdentityCredential.
func (mg *FederatedIdentityCredential) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationObjectIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationObjectIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationObjectID")
	}
	mg.Spec.ForProvider.ApplicationObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationObjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationObjectIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationObjectIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationObjectID")
	}
	mg.Spec.InitProvider.ApplicationObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationObjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Password.
func (mg *Password) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationObjectIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationObjectIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationObjectID")
	}
	mg.Spec.ForProvider.ApplicationObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationObjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationObjectIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationObjectIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationObjectID")
	}
	mg.Spec.InitProvider.ApplicationObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationObjectIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PreAuthorized.
func (mg *PreAuthorized) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPINamespacedResolver(c, mg)

	var rsp reference.NamespacedResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationID")
	}
	mg.Spec.ForProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ApplicationObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.ApplicationObjectIDRef,
		Selector:     mg.Spec.ForProvider.ApplicationObjectIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ApplicationObjectID")
	}
	mg.Spec.ForProvider.ApplicationObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ApplicationObjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AuthorizedAppID),
		Extract:      resource.ExtractParamPath("application_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.ForProvider.AuthorizedAppIDRef,
		Selector:     mg.Spec.ForProvider.AuthorizedAppIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AuthorizedAppID")
	}
	mg.Spec.ForProvider.AuthorizedAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AuthorizedAppIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationID),
		Extract:      resource.ExtractResourceID(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationID")
	}
	mg.Spec.InitProvider.ApplicationID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ApplicationObjectID),
		Extract:      reference.ExternalName(),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.ApplicationObjectIDRef,
		Selector:     mg.Spec.InitProvider.ApplicationObjectIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ApplicationObjectID")
	}
	mg.Spec.InitProvider.ApplicationObjectID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ApplicationObjectIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.NamespacedResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.AuthorizedAppID),
		Extract:      resource.ExtractParamPath("application_id", true),
		Namespace:    mg.GetNamespace(),
		Reference:    mg.Spec.InitProvider.AuthorizedAppIDRef,
		Selector:     mg.Spec.InitProvider.AuthorizedAppIDSelector,
		To: reference.To{
			List:    &ApplicationList{},
			Managed: &Application{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.AuthorizedAppID")
	}
	mg.Spec.InitProvider.AuthorizedAppID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.AuthorizedAppIDRef = rsp.ResolvedReference

	return nil
}
