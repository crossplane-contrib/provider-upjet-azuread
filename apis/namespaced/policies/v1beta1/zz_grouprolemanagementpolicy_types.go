// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1beta1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/v2/apis/common/v1"
	v2 "github.com/crossplane/crossplane-runtime/v2/apis/common/v2"
)

type ActivationRulesInitParameters struct {

	// An approval_stage block as defined below.
	// The approval stages for the activation
	ApprovalStage *ApprovalStageInitParameters `json:"approvalStage,omitempty" tf:"approval_stage,omitempty"`

	// The maximum length of time an activated role can be valid, in an ISO8601 Duration format (e.g. PT8H). Valid range is PT30M to PT23H30M, in 30 minute increments, or PT1D.
	// The time after which the an activation can be valid for
	MaximumDuration *string `json:"maximumDuration,omitempty" tf:"maximum_duration,omitempty"`

	// Is approval required for activation. If true an approval_stage block must be provided.
	// Whether an approval is required for activation
	RequireApproval *bool `json:"requireApproval,omitempty" tf:"require_approval,omitempty"`

	// Is a justification required during activation of the role.
	// Whether a justification is required during activation
	RequireJustification *bool `json:"requireJustification,omitempty" tf:"require_justification,omitempty"`

	// Is multi-factor authentication required to activate the role. Conflicts with required_conditional_access_authentication_context.
	// Whether multi-factor authentication is required during activation
	RequireMultifactorAuthentication *bool `json:"requireMultifactorAuthentication,omitempty" tf:"require_multifactor_authentication,omitempty"`

	// Is ticket information requrired during activation of the role.
	// Whether ticket information is required during activation
	RequireTicketInfo *bool `json:"requireTicketInfo,omitempty" tf:"require_ticket_info,omitempty"`

	// The Entra ID Conditional Access context that must be present for activation (e.g c1). Conflicts with require_multifactor_authentication.
	// Whether a conditional access context is required during activation
	RequiredConditionalAccessAuthenticationContext *string `json:"requiredConditionalAccessAuthenticationContext,omitempty" tf:"required_conditional_access_authentication_context,omitempty"`
}

type ActivationRulesObservation struct {

	// An approval_stage block as defined below.
	// The approval stages for the activation
	ApprovalStage *ApprovalStageObservation `json:"approvalStage,omitempty" tf:"approval_stage,omitempty"`

	// The maximum length of time an activated role can be valid, in an ISO8601 Duration format (e.g. PT8H). Valid range is PT30M to PT23H30M, in 30 minute increments, or PT1D.
	// The time after which the an activation can be valid for
	MaximumDuration *string `json:"maximumDuration,omitempty" tf:"maximum_duration,omitempty"`

	// Is approval required for activation. If true an approval_stage block must be provided.
	// Whether an approval is required for activation
	RequireApproval *bool `json:"requireApproval,omitempty" tf:"require_approval,omitempty"`

	// Is a justification required during activation of the role.
	// Whether a justification is required during activation
	RequireJustification *bool `json:"requireJustification,omitempty" tf:"require_justification,omitempty"`

	// Is multi-factor authentication required to activate the role. Conflicts with required_conditional_access_authentication_context.
	// Whether multi-factor authentication is required during activation
	RequireMultifactorAuthentication *bool `json:"requireMultifactorAuthentication,omitempty" tf:"require_multifactor_authentication,omitempty"`

	// Is ticket information requrired during activation of the role.
	// Whether ticket information is required during activation
	RequireTicketInfo *bool `json:"requireTicketInfo,omitempty" tf:"require_ticket_info,omitempty"`

	// The Entra ID Conditional Access context that must be present for activation (e.g c1). Conflicts with require_multifactor_authentication.
	// Whether a conditional access context is required during activation
	RequiredConditionalAccessAuthenticationContext *string `json:"requiredConditionalAccessAuthenticationContext,omitempty" tf:"required_conditional_access_authentication_context,omitempty"`
}

type ActivationRulesParameters struct {

	// An approval_stage block as defined below.
	// The approval stages for the activation
	// +kubebuilder:validation:Optional
	ApprovalStage *ApprovalStageParameters `json:"approvalStage,omitempty" tf:"approval_stage,omitempty"`

	// The maximum length of time an activated role can be valid, in an ISO8601 Duration format (e.g. PT8H). Valid range is PT30M to PT23H30M, in 30 minute increments, or PT1D.
	// The time after which the an activation can be valid for
	// +kubebuilder:validation:Optional
	MaximumDuration *string `json:"maximumDuration,omitempty" tf:"maximum_duration,omitempty"`

	// Is approval required for activation. If true an approval_stage block must be provided.
	// Whether an approval is required for activation
	// +kubebuilder:validation:Optional
	RequireApproval *bool `json:"requireApproval,omitempty" tf:"require_approval,omitempty"`

	// Is a justification required during activation of the role.
	// Whether a justification is required during activation
	// +kubebuilder:validation:Optional
	RequireJustification *bool `json:"requireJustification,omitempty" tf:"require_justification,omitempty"`

	// Is multi-factor authentication required to activate the role. Conflicts with required_conditional_access_authentication_context.
	// Whether multi-factor authentication is required during activation
	// +kubebuilder:validation:Optional
	RequireMultifactorAuthentication *bool `json:"requireMultifactorAuthentication,omitempty" tf:"require_multifactor_authentication,omitempty"`

	// Is ticket information requrired during activation of the role.
	// Whether ticket information is required during activation
	// +kubebuilder:validation:Optional
	RequireTicketInfo *bool `json:"requireTicketInfo,omitempty" tf:"require_ticket_info,omitempty"`

	// The Entra ID Conditional Access context that must be present for activation (e.g c1). Conflicts with require_multifactor_authentication.
	// Whether a conditional access context is required during activation
	// +kubebuilder:validation:Optional
	RequiredConditionalAccessAuthenticationContext *string `json:"requiredConditionalAccessAuthenticationContext,omitempty" tf:"required_conditional_access_authentication_context,omitempty"`
}

type ActiveAssignmentRulesInitParameters struct {

	// Must an assignment have an expiry date. false allows permanent assignment.
	// Must the assignment have an expiry date
	ExpirationRequired *bool `json:"expirationRequired,omitempty" tf:"expiration_required,omitempty"`

	// The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: P15D, P30D, P90D, P180D, or P365D.
	// The duration after which assignments expire
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`

	// Is a justification required to create new assignments.
	// Whether a justification is required to make an assignment
	RequireJustification *bool `json:"requireJustification,omitempty" tf:"require_justification,omitempty"`

	// Is multi-factor authentication required to create new assignments.
	// Whether multi-factor authentication is required to make an assignment
	RequireMultifactorAuthentication *bool `json:"requireMultifactorAuthentication,omitempty" tf:"require_multifactor_authentication,omitempty"`

	// Is ticket information required to create new assignments.
	// Whether ticket information is required to make an assignment
	RequireTicketInfo *bool `json:"requireTicketInfo,omitempty" tf:"require_ticket_info,omitempty"`
}

type ActiveAssignmentRulesObservation struct {

	// Must an assignment have an expiry date. false allows permanent assignment.
	// Must the assignment have an expiry date
	ExpirationRequired *bool `json:"expirationRequired,omitempty" tf:"expiration_required,omitempty"`

	// The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: P15D, P30D, P90D, P180D, or P365D.
	// The duration after which assignments expire
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`

	// Is a justification required to create new assignments.
	// Whether a justification is required to make an assignment
	RequireJustification *bool `json:"requireJustification,omitempty" tf:"require_justification,omitempty"`

	// Is multi-factor authentication required to create new assignments.
	// Whether multi-factor authentication is required to make an assignment
	RequireMultifactorAuthentication *bool `json:"requireMultifactorAuthentication,omitempty" tf:"require_multifactor_authentication,omitempty"`

	// Is ticket information required to create new assignments.
	// Whether ticket information is required to make an assignment
	RequireTicketInfo *bool `json:"requireTicketInfo,omitempty" tf:"require_ticket_info,omitempty"`
}

type ActiveAssignmentRulesParameters struct {

	// Must an assignment have an expiry date. false allows permanent assignment.
	// Must the assignment have an expiry date
	// +kubebuilder:validation:Optional
	ExpirationRequired *bool `json:"expirationRequired,omitempty" tf:"expiration_required,omitempty"`

	// The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: P15D, P30D, P90D, P180D, or P365D.
	// The duration after which assignments expire
	// +kubebuilder:validation:Optional
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`

	// Is a justification required to create new assignments.
	// Whether a justification is required to make an assignment
	// +kubebuilder:validation:Optional
	RequireJustification *bool `json:"requireJustification,omitempty" tf:"require_justification,omitempty"`

	// Is multi-factor authentication required to create new assignments.
	// Whether multi-factor authentication is required to make an assignment
	// +kubebuilder:validation:Optional
	RequireMultifactorAuthentication *bool `json:"requireMultifactorAuthentication,omitempty" tf:"require_multifactor_authentication,omitempty"`

	// Is ticket information required to create new assignments.
	// Whether ticket information is required to make an assignment
	// +kubebuilder:validation:Optional
	RequireTicketInfo *bool `json:"requireTicketInfo,omitempty" tf:"require_ticket_info,omitempty"`
}

type ActiveAssignmentsInitParameters struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	AdminNotifications *AdminNotificationsInitParameters `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	ApproverNotifications *ApproverNotificationsInitParameters `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	AssigneeNotifications *AssigneeNotificationsInitParameters `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type ActiveAssignmentsObservation struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	AdminNotifications *AdminNotificationsObservation `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	ApproverNotifications *ApproverNotificationsObservation `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	AssigneeNotifications *AssigneeNotificationsObservation `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type ActiveAssignmentsParameters struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	// +kubebuilder:validation:Optional
	AdminNotifications *AdminNotificationsParameters `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	// +kubebuilder:validation:Optional
	ApproverNotifications *ApproverNotificationsParameters `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	// +kubebuilder:validation:Optional
	AssigneeNotifications *AssigneeNotificationsParameters `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type AdminNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type AdminNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type AdminNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type ApprovalStageInitParameters struct {

	// blocks as defined below.
	// The IDs of the users or groups who can approve the activation
	PrimaryApprover []PrimaryApproverInitParameters `json:"primaryApprover,omitempty" tf:"primary_approver,omitempty"`
}

type ApprovalStageObservation struct {

	// blocks as defined below.
	// The IDs of the users or groups who can approve the activation
	PrimaryApprover []PrimaryApproverObservation `json:"primaryApprover,omitempty" tf:"primary_approver,omitempty"`
}

type ApprovalStageParameters struct {

	// blocks as defined below.
	// The IDs of the users or groups who can approve the activation
	// +kubebuilder:validation:Optional
	PrimaryApprover []PrimaryApproverParameters `json:"primaryApprover" tf:"primary_approver,omitempty"`
}

type ApproverNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type ApproverNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type ApproverNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type AssigneeNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type AssigneeNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type AssigneeNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type EligibleActivationsAdminNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleActivationsAdminNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleActivationsAdminNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type EligibleActivationsApproverNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleActivationsApproverNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleActivationsApproverNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type EligibleActivationsAssigneeNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleActivationsAssigneeNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleActivationsAssigneeNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type EligibleActivationsInitParameters struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	AdminNotifications *EligibleActivationsAdminNotificationsInitParameters `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	ApproverNotifications *EligibleActivationsApproverNotificationsInitParameters `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	AssigneeNotifications *EligibleActivationsAssigneeNotificationsInitParameters `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type EligibleActivationsObservation struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	AdminNotifications *EligibleActivationsAdminNotificationsObservation `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	ApproverNotifications *EligibleActivationsApproverNotificationsObservation `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	AssigneeNotifications *EligibleActivationsAssigneeNotificationsObservation `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type EligibleActivationsParameters struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	// +kubebuilder:validation:Optional
	AdminNotifications *EligibleActivationsAdminNotificationsParameters `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	// +kubebuilder:validation:Optional
	ApproverNotifications *EligibleActivationsApproverNotificationsParameters `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	// +kubebuilder:validation:Optional
	AssigneeNotifications *EligibleActivationsAssigneeNotificationsParameters `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type EligibleAssignmentRulesInitParameters struct {

	// Must an assignment have an expiry date. false allows permanent assignment.
	// Must the assignment have an expiry date
	ExpirationRequired *bool `json:"expirationRequired,omitempty" tf:"expiration_required,omitempty"`

	// The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: P15D, P30D, P90D, P180D, or P365D.
	// The duration after which assignments expire
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`
}

type EligibleAssignmentRulesObservation struct {

	// Must an assignment have an expiry date. false allows permanent assignment.
	// Must the assignment have an expiry date
	ExpirationRequired *bool `json:"expirationRequired,omitempty" tf:"expiration_required,omitempty"`

	// The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: P15D, P30D, P90D, P180D, or P365D.
	// The duration after which assignments expire
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`
}

type EligibleAssignmentRulesParameters struct {

	// Must an assignment have an expiry date. false allows permanent assignment.
	// Must the assignment have an expiry date
	// +kubebuilder:validation:Optional
	ExpirationRequired *bool `json:"expirationRequired,omitempty" tf:"expiration_required,omitempty"`

	// The maximum length of time an assignment can be valid, as an ISO8601 duration. Permitted values: P15D, P30D, P90D, P180D, or P365D.
	// The duration after which assignments expire
	// +kubebuilder:validation:Optional
	ExpireAfter *string `json:"expireAfter,omitempty" tf:"expire_after,omitempty"`
}

type EligibleAssignmentsAdminNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsAdminNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsAdminNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsApproverNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsApproverNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsApproverNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsAssigneeNotificationsInitParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsAssigneeNotificationsObservation struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	DefaultRecipients *bool `json:"defaultRecipients,omitempty" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	NotificationLevel *string `json:"notificationLevel,omitempty" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsAssigneeNotificationsParameters struct {

	// A list of additional email addresses that will receive these notifications.
	// The additional recipients to notify
	// +kubebuilder:validation:Optional
	// +listType=set
	AdditionalRecipients []*string `json:"additionalRecipients,omitempty" tf:"additional_recipients,omitempty"`

	// Should the default recipients receive these notifications.
	// Whether the default recipients are notified
	// +kubebuilder:validation:Optional
	DefaultRecipients *bool `json:"defaultRecipients" tf:"default_recipients,omitempty"`

	// What level of notifications should be sent. Options are All or Critical.
	// What level of notifications are sent
	// +kubebuilder:validation:Optional
	NotificationLevel *string `json:"notificationLevel" tf:"notification_level,omitempty"`
}

type EligibleAssignmentsInitParameters struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	AdminNotifications *EligibleAssignmentsAdminNotificationsInitParameters `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	ApproverNotifications *EligibleAssignmentsApproverNotificationsInitParameters `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	AssigneeNotifications *EligibleAssignmentsAssigneeNotificationsInitParameters `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type EligibleAssignmentsObservation struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	AdminNotifications *EligibleAssignmentsAdminNotificationsObservation `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	ApproverNotifications *EligibleAssignmentsApproverNotificationsObservation `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	AssigneeNotifications *EligibleAssignmentsAssigneeNotificationsObservation `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type EligibleAssignmentsParameters struct {

	// A notification_settings block as defined above.
	// Admin notification settings
	// +kubebuilder:validation:Optional
	AdminNotifications *EligibleAssignmentsAdminNotificationsParameters `json:"adminNotifications,omitempty" tf:"admin_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Approver notification settings
	// +kubebuilder:validation:Optional
	ApproverNotifications *EligibleAssignmentsApproverNotificationsParameters `json:"approverNotifications,omitempty" tf:"approver_notifications,omitempty"`

	// A notification_settings block as defined above.
	// Assignee notification settings
	// +kubebuilder:validation:Optional
	AssigneeNotifications *EligibleAssignmentsAssigneeNotificationsParameters `json:"assigneeNotifications,omitempty" tf:"assignee_notifications,omitempty"`
}

type GroupRoleManagementPolicyInitParameters struct {

	// An activation_rules block as defined below.
	// The activation rules of the policy
	ActivationRules *ActivationRulesInitParameters `json:"activationRules,omitempty" tf:"activation_rules,omitempty"`

	// An active_assignment_rules block as defined below.
	// The rules for active assignment of the policy
	ActiveAssignmentRules *ActiveAssignmentRulesInitParameters `json:"activeAssignmentRules,omitempty" tf:"active_assignment_rules,omitempty"`

	// An eligible_assignment_rules block as defined below.
	// The rules for eligible assignment of the policy
	EligibleAssignmentRules *EligibleAssignmentRulesInitParameters `json:"eligibleAssignmentRules,omitempty" tf:"eligible_assignment_rules,omitempty"`

	// The ID of the Azure AD group for which the policy applies.
	// ID of the group to which this policy is assigned
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/namespaced/groups/v1beta1.Group
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a Group in groups to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.NamespacedReference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a Group in groups to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.NamespacedSelector `json:"groupIdSelector,omitempty" tf:"-"`

	// A notification_rules block as defined below.
	// The notification rules of the policy
	NotificationRules *NotificationRulesInitParameters `json:"notificationRules,omitempty" tf:"notification_rules,omitempty"`

	// The type of assignment this policy coveres. Can be either member or owner.
	// The ID of the role of this policy to the group
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type GroupRoleManagementPolicyObservation struct {

	// An activation_rules block as defined below.
	// The activation rules of the policy
	ActivationRules *ActivationRulesObservation `json:"activationRules,omitempty" tf:"activation_rules,omitempty"`

	// An active_assignment_rules block as defined below.
	// The rules for active assignment of the policy
	ActiveAssignmentRules *ActiveAssignmentRulesObservation `json:"activeAssignmentRules,omitempty" tf:"active_assignment_rules,omitempty"`

	// (String) The description of this policy.
	// Description of the policy
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (String) The display name of this policy.
	// The display name of the policy
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// An eligible_assignment_rules block as defined below.
	// The rules for eligible assignment of the policy
	EligibleAssignmentRules *EligibleAssignmentRulesObservation `json:"eligibleAssignmentRules,omitempty" tf:"eligible_assignment_rules,omitempty"`

	// The ID of the Azure AD group for which the policy applies.
	// ID of the group to which this policy is assigned
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// (String) The ID of this policy.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A notification_rules block as defined below.
	// The notification rules of the policy
	NotificationRules *NotificationRulesObservation `json:"notificationRules,omitempty" tf:"notification_rules,omitempty"`

	// The type of assignment this policy coveres. Can be either member or owner.
	// The ID of the role of this policy to the group
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type GroupRoleManagementPolicyParameters struct {

	// An activation_rules block as defined below.
	// The activation rules of the policy
	// +kubebuilder:validation:Optional
	ActivationRules *ActivationRulesParameters `json:"activationRules,omitempty" tf:"activation_rules,omitempty"`

	// An active_assignment_rules block as defined below.
	// The rules for active assignment of the policy
	// +kubebuilder:validation:Optional
	ActiveAssignmentRules *ActiveAssignmentRulesParameters `json:"activeAssignmentRules,omitempty" tf:"active_assignment_rules,omitempty"`

	// An eligible_assignment_rules block as defined below.
	// The rules for eligible assignment of the policy
	// +kubebuilder:validation:Optional
	EligibleAssignmentRules *EligibleAssignmentRulesParameters `json:"eligibleAssignmentRules,omitempty" tf:"eligible_assignment_rules,omitempty"`

	// The ID of the Azure AD group for which the policy applies.
	// ID of the group to which this policy is assigned
	// +crossplane:generate:reference:type=github.com/upbound/provider-azuread/apis/namespaced/groups/v1beta1.Group
	// +kubebuilder:validation:Optional
	GroupID *string `json:"groupId,omitempty" tf:"group_id,omitempty"`

	// Reference to a Group in groups to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDRef *v1.NamespacedReference `json:"groupIdRef,omitempty" tf:"-"`

	// Selector for a Group in groups to populate groupId.
	// +kubebuilder:validation:Optional
	GroupIDSelector *v1.NamespacedSelector `json:"groupIdSelector,omitempty" tf:"-"`

	// A notification_rules block as defined below.
	// The notification rules of the policy
	// +kubebuilder:validation:Optional
	NotificationRules *NotificationRulesParameters `json:"notificationRules,omitempty" tf:"notification_rules,omitempty"`

	// The type of assignment this policy coveres. Can be either member or owner.
	// The ID of the role of this policy to the group
	// +kubebuilder:validation:Optional
	RoleID *string `json:"roleId,omitempty" tf:"role_id,omitempty"`
}

type NotificationRulesInitParameters struct {

	// A notification_target block as defined below to configure notfications on active role assignments.
	// Notifications about active assignments
	ActiveAssignments *ActiveAssignmentsInitParameters `json:"activeAssignments,omitempty" tf:"active_assignments,omitempty"`

	// A notification_target block as defined below for configuring notifications on activation of eligible role.
	// Notifications about activations of eligible assignments
	EligibleActivations *EligibleActivationsInitParameters `json:"eligibleActivations,omitempty" tf:"eligible_activations,omitempty"`

	// A notification_target block as defined below to configure notification on eligible role assignments.
	// Notifications about eligible assignments
	EligibleAssignments *EligibleAssignmentsInitParameters `json:"eligibleAssignments,omitempty" tf:"eligible_assignments,omitempty"`
}

type NotificationRulesObservation struct {

	// A notification_target block as defined below to configure notfications on active role assignments.
	// Notifications about active assignments
	ActiveAssignments *ActiveAssignmentsObservation `json:"activeAssignments,omitempty" tf:"active_assignments,omitempty"`

	// A notification_target block as defined below for configuring notifications on activation of eligible role.
	// Notifications about activations of eligible assignments
	EligibleActivations *EligibleActivationsObservation `json:"eligibleActivations,omitempty" tf:"eligible_activations,omitempty"`

	// A notification_target block as defined below to configure notification on eligible role assignments.
	// Notifications about eligible assignments
	EligibleAssignments *EligibleAssignmentsObservation `json:"eligibleAssignments,omitempty" tf:"eligible_assignments,omitempty"`
}

type NotificationRulesParameters struct {

	// A notification_target block as defined below to configure notfications on active role assignments.
	// Notifications about active assignments
	// +kubebuilder:validation:Optional
	ActiveAssignments *ActiveAssignmentsParameters `json:"activeAssignments,omitempty" tf:"active_assignments,omitempty"`

	// A notification_target block as defined below for configuring notifications on activation of eligible role.
	// Notifications about activations of eligible assignments
	// +kubebuilder:validation:Optional
	EligibleActivations *EligibleActivationsParameters `json:"eligibleActivations,omitempty" tf:"eligible_activations,omitempty"`

	// A notification_target block as defined below to configure notification on eligible role assignments.
	// Notifications about eligible assignments
	// +kubebuilder:validation:Optional
	EligibleAssignments *EligibleAssignmentsParameters `json:"eligibleAssignments,omitempty" tf:"eligible_assignments,omitempty"`
}

type PrimaryApproverInitParameters struct {

	// The ID of the object which will act as an approver.
	// The ID of the object to act as an approver
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The type of object acting as an approver. Possible options are singleUser and groupMembers.
	// The type of object acting as an approver
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrimaryApproverObservation struct {

	// The ID of the object which will act as an approver.
	// The ID of the object to act as an approver
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// The type of object acting as an approver. Possible options are singleUser and groupMembers.
	// The type of object acting as an approver
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrimaryApproverParameters struct {

	// The ID of the object which will act as an approver.
	// The ID of the object to act as an approver
	// +kubebuilder:validation:Optional
	ObjectID *string `json:"objectId" tf:"object_id,omitempty"`

	// The type of object acting as an approver. Possible options are singleUser and groupMembers.
	// The type of object acting as an approver
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// GroupRoleManagementPolicySpec defines the desired state of GroupRoleManagementPolicy
type GroupRoleManagementPolicySpec struct {
	v2.ManagedResourceSpec `json:",inline"`
	ForProvider            GroupRoleManagementPolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GroupRoleManagementPolicyInitParameters `json:"initProvider,omitempty"`
}

// GroupRoleManagementPolicyStatus defines the observed state of GroupRoleManagementPolicy.
type GroupRoleManagementPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GroupRoleManagementPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// GroupRoleManagementPolicy is the Schema for the GroupRoleManagementPolicys API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Namespaced,categories={crossplane,managed,azuread}
type GroupRoleManagementPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.roleId) || (has(self.initProvider) && has(self.initProvider.roleId))",message="spec.forProvider.roleId is a required parameter"
	Spec   GroupRoleManagementPolicySpec   `json:"spec"`
	Status GroupRoleManagementPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GroupRoleManagementPolicyList contains a list of GroupRoleManagementPolicys
type GroupRoleManagementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GroupRoleManagementPolicy `json:"items"`
}

// Repository type metadata.
var (
	GroupRoleManagementPolicy_Kind             = "GroupRoleManagementPolicy"
	GroupRoleManagementPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GroupRoleManagementPolicy_Kind}.String()
	GroupRoleManagementPolicy_KindAPIVersion   = GroupRoleManagementPolicy_Kind + "." + CRDGroupVersion.String()
	GroupRoleManagementPolicy_GroupVersionKind = CRDGroupVersion.WithKind(GroupRoleManagementPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&GroupRoleManagementPolicy{}, &GroupRoleManagementPolicyList{})
}
